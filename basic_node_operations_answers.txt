1) Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.
A: Sort - this command sorts each line of commands.js and returns the result.
        ***RESULT***
            //we will add the functionality of echo next within the object commandLibrary  
            break;
            commandLibrary.cat(userInputArray.slice(1));
            commandLibrary.echo(userInputArray.slice(1).join(" "));
            done(data);
            if(err) throw err;
        });
        case "echo":
        case cat:
        const fileName = fullPath[0];
        done(userInput);
        fs.readFile(fileName, (err, data) => {
     process.stdout.write('\nprompt > ');
     process.stdout.write(output);
    "cat": function(fullPath){
    "echo": function(userInput) {
    }
    }
    },
   const command = userInputArray[0];
   const userInputArray = userInput.split(" ");
   switch (command) {
  //parses the user input to understand which command was typed
 }
 }
 };
 const commandLibrary = {
 function done(output) {
 function evaluateCmd(userInput) {
 module.exports.commandLibrary = commandLibrary;
 module.exports.evaluateCmd = evaluateCmd;





//where we will store our commands
//where we will store the logic of our commands
//write out data
const fs = require("fs");

wc - this command returns the lines, words, and characters of a file.
    ***RESULT***
    39 110 1144

uniq - 

2) Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.